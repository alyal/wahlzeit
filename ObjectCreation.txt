BuildingsPhoto:

Sequence of method calls that lead to the new BuildingsPhoto object:

PhotoManager: createPhoto() --> PhotoUtil: createPhoto() --> BuildingsPhotoFactory: createPhoto() --> Building: new Building(…)

Explanation: 

(1) When a user wants to add a new Photo over the UploadPhotoFormHandler the createPhoto() method of the PhotoManager (super class of domain PhotoManager) is called 
(2) Within the createPhoto() method from (1) the createPhoto() method from PhotoUtil class is called
(3) Within the createPhoto() method of PhotoUtil the singleton instance of the domain PhotoFactory (BuildingsPhotoFactory) is fetched
(4) On the singleton BuildingsPhotoFactory instance of (3) the createPhoto() in the Factory is called with a PhotoID as parameter
(5) Within the BuildingsPhotoFactory the BuildingsPhoto object with the passed PhotoID from (4) is created by the createPhoto() method calling the Buildings class constructor.

Object creation solution in the solution space:

Delegation: separate-object, by BuildingsPhotoFactory 
Selection: no selection (by a user) as presented in lecture so far
Configuration: no selection (by a user) as presented in lecture so far
Instantiation: in-code, by the constructor
Initialization: default, by the constructor
Building: default

Building:

Sequence of method calls that lead to the new Building object:

BuildingsManager: createBuilding() --> BuildingsManager: getBuildingsType() --> BuildingsManager: getBuilding()

Explanation: 

(0) At the moment there is no UI element or function where a user could call for a Building object creation
(1) (if (0) is implemented): When a user wants to add a new Building the createBuilding() methods of the BuildingsManager is called
(2) Within the createBuilding() method the getBuildingsType method is called returning an existing BuildingsTyp.
	If the type does not exist a BuildingsTypeDoesNotExistException is thrown
(3) If the type of (2) exists, the getBuilding() method is called returning an existing Building or creates a new Building instance
	with the passed parameters and the BuildingsType of step (2) by calling the createInstance() method on the BuildingsType object.
	The createInstance() method than calls the Buildings constructor with all passed parameters and itself as the BuildingsType of the new building.
 
Object creation solution in the solution space: 
Delegation: separate-object, by BuilingsType 
Selection: no selection (by a user) as presented in lecture so far 
Configuration: no configuration (by a user) as presented in lecture so far
Instantiation: in-code, by constructor
Initialization: default, by constructor
Building: default
